commit a1dfd9afb2412c91f29cf2531fda61477fd1a2f1
Author: Krzysztof Sobiecki <sobkas@gmail.com>
Date:   Thu Aug 27 11:16:43 2015 +0200

    Crossguid is not a good library

diff --git a/configure.ac b/configure.ac
index df87c0c..5846e90 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1181,21 +1181,13 @@ if test "${target_platform}" = "target_linux" || test "${target_platform}" = "ta
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
 fi
 
-AC_MSG_CHECKING("for libcrossguid")
-AC_LANG_PUSH([C++])
-SAVED_LIBS="$LIBS"
-LIBS="$LIBS -lcrossguid $UUID_LIBS"
-AC_LINK_IFELSE(
-  [AC_LANG_PROGRAM(
-    [#include <guid.h>],
-    [Guid dummy])],
-  [AC_MSG_RESULT(yes); SAVED_LIBS="$SAVED_LIBS $LDFLAGS -lcrossguid $UUID_LIBS"],
-  [AC_MSG_ERROR(crossguid not found)])
-LIBS="$SAVED_LIBS"
-AC_LANG_POP([C++])
 if test "${target_platform}" = "target_android"; then
   CXXFLAGS="$CXXFLAGS -DGUID_ANDROID"
 fi
+if test "${target_platform}" = "target_linux"; then
+  LIBS="$LIBS $UUID_LIBS"
+  CXXFLAGS="$CXXFLAGS -DGUID_LIBUUID"
+fi
 
 PKG_CHECK_MODULES([YAJL], [yajl >= 2],
   [INCLUDES="$INCLUDES $YAJL_CFLAGS"; LIBS="$LIBS $YAJL_LIBS"; YAJL_FOUND="true"],
diff --git a/xbmc/Makefile.in b/xbmc/Makefile.in
index e73a1d4..3875bd4 100644
--- a/xbmc/Makefile.in
+++ b/xbmc/Makefile.in
@@ -37,6 +37,7 @@ SRCS=Application.cpp \
      xbmc.cpp \
      XbmcContext.cpp \
 
+
 LIB=xbmc.a
 
 DISTCLEAN_FILES=DllPaths_generated.h CompileInfo.cpp
diff --git a/xbmc/utils/Makefile.in b/xbmc/utils/Makefile.in
index dbd3db9..b96926b 100644
--- a/xbmc/utils/Makefile.in
+++ b/xbmc/utils/Makefile.in
@@ -79,6 +79,7 @@ SRCS += Utf8Utils.cpp
 SRCS += XSLTUtils.cpp
 SRCS += ActorProtocol.cpp 
 SRCS += SysfsUtils.cpp
+SRCS += guid.cpp
 
 ifeq (@USE_OPENGLES@,1)
 SRCS += AMLUtils.cpp
diff --git a/xbmc/utils/StringUtils.cpp b/xbmc/utils/StringUtils.cpp
index 721e067..76a8a38 100644
--- a/xbmc/utils/StringUtils.cpp
+++ b/xbmc/utils/StringUtils.cpp
@@ -28,7 +28,7 @@
 //
 //------------------------------------------------------------------------
 
-#include <guid.h>
+#include "guid.h"
 
 #include "StringUtils.h"
 #include "CharsetConverter.h"
diff --git a/xbmc/utils/guid.cpp b/xbmc/utils/guid.cpp
new file mode 100644
index 0000000..b90e3cf
--- /dev/null
+++ b/xbmc/utils/guid.cpp
@@ -0,0 +1,278 @@
+/*
+The MIT License (MIT)
+
+Copyright (c) 2014 Graeme Hill (http://graemehill.ca)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+*/
+
+#include "guid.h"
+
+#ifdef GUID_LIBUUID
+#include <uuid/uuid.h>
+#endif
+
+#ifdef GUID_CFUUID
+#include <CoreFoundation/CFUUID.h>
+#endif
+
+#ifdef GUID_WINDOWS
+#include <objbase.h>
+#endif
+
+#ifdef GUID_ANDROID
+#include <jni.h>
+#endif
+
+using namespace std;
+
+// overload << so that it's easy to convert to a string
+ostream &operator<<(ostream &s, const Guid &guid)
+{
+  return s << hex << setfill('0')
+    << setw(2) << (int)guid._bytes[0]
+    << setw(2) << (int)guid._bytes[1]
+    << setw(2) << (int)guid._bytes[2]
+    << setw(2) << (int)guid._bytes[3]
+    << "-"
+    << setw(2) << (int)guid._bytes[4]
+    << setw(2) << (int)guid._bytes[5]
+    << "-"
+    << setw(2) << (int)guid._bytes[6]
+    << setw(2) << (int)guid._bytes[7]
+    << "-"
+    << setw(2) << (int)guid._bytes[8]
+    << setw(2) << (int)guid._bytes[9]
+    << "-"
+    << setw(2) << (int)guid._bytes[10]
+    << setw(2) << (int)guid._bytes[11]
+    << setw(2) << (int)guid._bytes[12]
+    << setw(2) << (int)guid._bytes[13]
+    << setw(2) << (int)guid._bytes[14]
+    << setw(2) << (int)guid._bytes[15];
+}
+
+// create a guid from vector of bytes
+Guid::Guid(const vector<unsigned char> &bytes)
+{
+  _bytes = bytes;
+}
+
+// create a guid from array of bytes
+Guid::Guid(const unsigned char *bytes)
+{
+  _bytes.assign(bytes, bytes + 16);
+}
+
+// converts a single hex char to a number (0 - 15)
+unsigned char hexDigitToChar(char ch)
+{
+  if (ch > 47 && ch < 58)
+    return ch - 48;
+
+  if (ch > 96 && ch < 103)
+    return ch - 87;
+
+  if (ch > 64 && ch < 71)
+    return ch - 55;
+
+  return 0;
+}
+
+// converts the two hexadecimal characters to an unsigned char (a byte)
+unsigned char hexPairToChar(char a, char b)
+{
+  return hexDigitToChar(a) * 16 + hexDigitToChar(b);
+}
+
+// create a guid from string
+Guid::Guid(const string &fromString)
+{
+  _bytes.clear();
+
+  char charOne, charTwo;
+  bool lookingForFirstChar = true;
+
+  for (const char &ch : fromString)
+  {
+    if (ch == '-')
+      continue;
+
+    if (lookingForFirstChar)
+    {
+      charOne = ch;
+      lookingForFirstChar = false;
+    }
+    else
+    {
+      charTwo = ch;
+      auto byte = hexPairToChar(charOne, charTwo);
+      _bytes.push_back(byte);
+      lookingForFirstChar = true;
+    }
+  }
+
+}
+
+// create empty guid
+Guid::Guid()
+{
+  _bytes = vector<unsigned char>(16, 0);
+}
+
+// copy constructor
+Guid::Guid(const Guid &other)
+{
+  _bytes = other._bytes;
+}
+
+// overload assignment operator
+Guid &Guid::operator=(const Guid &other)
+{
+  _bytes = other._bytes;
+  return *this;
+}
+
+// overload equality operator
+bool Guid::operator==(const Guid &other) const
+{
+  return _bytes == other._bytes;
+}
+
+// overload inequality operator
+bool Guid::operator!=(const Guid &other) const
+{
+  return !((*this) == other);
+}
+
+// This is the linux friendly implementation, but it could work on other
+// systems that have libuuid available
+#ifdef GUID_LIBUUID
+Guid GuidGenerator::newGuid()
+{
+  uuid_t id;
+  uuid_generate(id);
+  return id;
+}
+#endif
+
+// this is the mac and ios version 
+#ifdef GUID_CFUUID
+Guid GuidGenerator::newGuid()
+{
+  auto newId = CFUUIDCreate(NULL);
+  auto bytes = CFUUIDGetUUIDBytes(newId);
+  CFRelease(newId);
+
+  const unsigned char byteArray[16] =
+  {
+    bytes.byte0,
+    bytes.byte1,
+    bytes.byte2,
+    bytes.byte3,
+    bytes.byte4,
+    bytes.byte5,
+    bytes.byte6,
+    bytes.byte7,
+    bytes.byte8,
+    bytes.byte9,
+    bytes.byte10,
+    bytes.byte11,
+    bytes.byte12,
+    bytes.byte13,
+    bytes.byte14,
+    bytes.byte15
+  };
+  return byteArray;
+}
+#endif
+
+// obviously this is the windows version
+#ifdef GUID_WINDOWS
+Guid GuidGenerator::newGuid()
+{
+  GUID newId;
+  CoCreateGuid(&newId);
+
+  const unsigned char bytes[16] = 
+  {
+    (newId.Data1 >> 24) & 0xFF,
+    (newId.Data1 >> 16) & 0xFF,
+    (newId.Data1 >> 8) & 0xFF,
+    (newId.Data1) & 0xff,
+
+    (newId.Data2 >> 8) & 0xFF,
+    (newId.Data2) & 0xff,
+
+    (newId.Data3 >> 8) & 0xFF,
+    (newId.Data3) & 0xFF,
+
+    newId.Data4[0],
+    newId.Data4[1],
+    newId.Data4[2],
+    newId.Data4[3],
+    newId.Data4[4],
+    newId.Data4[5],
+    newId.Data4[6],
+    newId.Data4[7]
+  };
+
+  return bytes;
+}
+#endif
+
+// android version that uses a call to a java api
+#ifdef GUID_ANDROID
+GuidGenerator::GuidGenerator(JNIEnv *env)
+{
+  _env = env;
+  _uuidClass = env->FindClass("java/util/UUID");
+  _newGuidMethod = env->GetStaticMethodID(_uuidClass, "randomUUID", "()Ljava/util/UUID;");
+  _mostSignificantBitsMethod = env->GetMethodID(_uuidClass, "getMostSignificantBits", "()J");
+  _leastSignificantBitsMethod = env->GetMethodID(_uuidClass, "getLeastSignificantBits", "()J");
+}
+
+Guid GuidGenerator::newGuid()
+{
+  jobject javaUuid = _env->CallStaticObjectMethod(_uuidClass, _newGuidMethod);
+  jlong mostSignificant = _env->CallLongMethod(javaUuid, _mostSignificantBitsMethod);
+  jlong leastSignificant = _env->CallLongMethod(javaUuid, _leastSignificantBitsMethod);
+
+  unsigned char bytes[16] = 
+  {
+    (mostSignificant >> 56) & 0xFF,
+    (mostSignificant >> 48) & 0xFF,
+    (mostSignificant >> 40) & 0xFF,
+    (mostSignificant >> 32) & 0xFF,
+    (mostSignificant >> 24) & 0xFF,
+    (mostSignificant >> 16) & 0xFF,
+    (mostSignificant >> 8) & 0xFF,
+    (mostSignificant) & 0xFF,
+    (leastSignificant >> 56) & 0xFF,
+    (leastSignificant >> 48) & 0xFF,
+    (leastSignificant >> 40) & 0xFF,
+    (leastSignificant >> 32) & 0xFF,
+    (leastSignificant >> 24) & 0xFF,
+    (leastSignificant >> 16) & 0xFF,
+    (leastSignificant >> 8) & 0xFF,
+    (leastSignificant) & 0xFF,
+  };
+  return bytes;
+}
+#endif
diff --git a/xbmc/utils/guid.h b/xbmc/utils/guid.h
new file mode 100644
index 0000000..d066577
--- /dev/null
+++ b/xbmc/utils/guid.h
@@ -0,0 +1,102 @@
+/*
+The MIT License (MIT)
+
+Copyright (c) 2014 Graeme Hill (http://graemehill.ca)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+*/
+
+#pragma once
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <string>
+#include <iomanip>
+
+#ifdef GUID_ANDROID
+#include <jni.h>
+#endif
+
+// Class to represent a GUID/UUID. Each instance acts as a wrapper around a
+// 16 byte value that can be passed around by value. It also supports
+// conversion to string (via the stream operator <<) and conversion from a
+// string via constructor.
+class Guid
+{
+  public:
+
+    // create a guid from vector of bytes
+    Guid(const std::vector<unsigned char> &bytes);
+
+    // create a guid from array of bytes
+    Guid(const unsigned char *bytes);
+
+    // create a guid from string
+    Guid(const std::string &fromString);
+
+    // create empty guid
+    Guid();
+
+    // copy constructor
+    Guid(const Guid &other);
+
+    // overload assignment operator
+    Guid &operator=(const Guid &other);
+
+    // overload equality and inequality operator
+    bool operator==(const Guid &other) const;
+    bool operator!=(const Guid &other) const;
+
+  private:
+
+    // actual data
+    std::vector<unsigned char> _bytes;
+
+    // make the << operator a friend so it can access _bytes
+    friend std::ostream &operator<<(std::ostream &s, const Guid &guid);
+};
+
+// Class that can create new guids. The only reason this exists instead of
+// just a global "newGuid" function is because some platforms will require
+// that there is some attached context. In the case of android, we need to
+// know what JNIEnv is being used to call back to Java, but the newGuid()
+// function would no longer be cross-platform if we parameterized the android
+// version. Instead, construction of the GuidGenerator may be different on
+// each platform, but the use of newGuid is uniform.
+class GuidGenerator
+{
+  public:
+#ifdef GUID_ANDROID
+    GuidGenerator(JNIEnv *env);
+#else
+    GuidGenerator() { }
+#endif
+
+    Guid newGuid();
+
+#ifdef GUID_ANDROID
+  private:
+    JNIEnv *_env;
+    jclass _uuidClass;
+    jmethodID _newGuidMethod;
+    jmethodID _mostSignificantBitsMethod;
+    jmethodID _leastSignificantBitsMethod;
+#endif
+};
