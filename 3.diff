diff --git a/src/gallium/state_trackers/nine/device9.c b/src/gallium/state_trackers/nine/device9.c
index 673b7a4..09a0dc5 100644
--- a/src/gallium/state_trackers/nine/device9.c
+++ b/src/gallium/state_trackers/nine/device9.c
@@ -146,6 +146,7 @@ NineDevice9_ctor( struct NineDevice9 *This,
 
     if (FAILED(hr)) { return hr; }
 
+    char *env_string = NULL;
     list_inithead(&This->update_textures);
     list_inithead(&This->managed_textures);
 
@@ -310,9 +311,12 @@ NineDevice9_ctor( struct NineDevice9 *This,
 
         if (strstr(pScreen->get_name(pScreen), "AMD") ||
             strstr(pScreen->get_name(pScreen), "ATI")) {
-            This->prefer_user_constbuf = TRUE;
             This->driver_bugs.buggy_barycentrics = TRUE;
         }
+       env_string  = getenv("NINE_DEBUG_PRECCORR");
+        if (env_string && strstr(env_string, "disable")) {
+            This->driver_bugs.buggy_barycentrics = FALSE;
+        }
 
         tmpl.target = PIPE_BUFFER;
         tmpl.format = PIPE_FORMAT_R8_UNORM;
diff --git a/src/gallium/state_trackers/nine/device9.h b/src/gallium/state_trackers/nine/device9.h
index 98d9c4d..f76ede2 100644
--- a/src/gallium/state_trackers/nine/device9.h
+++ b/src/gallium/state_trackers/nine/device9.h
@@ -74,8 +74,6 @@ struct NineDevice9
     boolean is_recording;
     boolean in_scene;
 
-    boolean prefer_user_constbuf;
-
     struct pipe_resource *constbuf_vs;
     struct pipe_resource *constbuf_ps;
     uint16_t vs_const_size;
diff --git a/src/gallium/state_trackers/nine/nine_state.c b/src/gallium/state_trackers/nine/nine_state.c
index 98b077a..334de57 100644
--- a/src/gallium/state_trackers/nine/nine_state.c
+++ b/src/gallium/state_trackers/nine/nine_state.c
@@ -36,6 +36,8 @@
 #include "util/u_upload_mgr.h"
 #include "util/u_math.h"
 
+#include <stdio.h>
+
 #define DBG_CHANNEL DBG_DEVICE
 
 /* State preparation only */
@@ -61,157 +63,6 @@ prepare_rasterizer(struct NineDevice9 *device)
     device->state.commit |= NINE_STATE_COMMIT_RASTERIZER;
 }
 
-static void
-prepare_ps_constants_userbuf(struct NineDevice9 *device);
-
-#define DO_UPLOAD_CONST_F(buf,p,c,d) \
-    do { \
-        DBG("upload ConstantF [%u .. %u]\n", x, (x) + (c) - 1); \
-        box.x = (p) * 4 * sizeof(float); \
-        box.width = (c) * 4 * sizeof(float); \
-        pipe->transfer_inline_write(pipe, buf, 0, usage, &box, &((d)[p * 4]), \
-                                    0, 0); \
-    } while(0)
-
-/* OK, this is a bit ugly ... */
-static void
-upload_constants(struct NineDevice9 *device, unsigned shader_type)
-{
-    struct pipe_context *pipe = device->pipe;
-    struct pipe_resource *buf;
-    struct pipe_box box;
-    const void *data;
-    const float *const_f;
-    const int *const_i;
-    const BOOL *const_b;
-    uint32_t data_b[NINE_MAX_CONST_B];
-    uint16_t dirty_i;
-    uint16_t dirty_b;
-    const unsigned usage = PIPE_TRANSFER_WRITE | PIPE_TRANSFER_DISCARD_RANGE;
-    unsigned x = 0; /* silence warning */
-    unsigned i, c;
-    struct nine_range *r, *p, *lconstf_ranges;
-    float *lconstf_data;
-
-    box.y = 0;
-    box.z = 0;
-    box.height = 1;
-    box.depth = 1;
-
-    if (shader_type == PIPE_SHADER_VERTEX) {
-        DBG("VS\n");
-        buf = device->constbuf_vs;
-
-        const_f = device->state.vs_const_f;
-        for (p = r = device->state.changed.vs_const_f; r; p = r, r = r->next)
-            DO_UPLOAD_CONST_F(buf, r->bgn, r->end - r->bgn, const_f);
-        if (p) {
-            nine_range_pool_put_chain(&device->range_pool,
-                                      device->state.changed.vs_const_f, p);
-            device->state.changed.vs_const_f = NULL;
-        }
-
-        dirty_i = device->state.changed.vs_const_i;
-        device->state.changed.vs_const_i = 0;
-        const_i = &device->state.vs_const_i[0][0];
-
-        dirty_b = device->state.changed.vs_const_b;
-        device->state.changed.vs_const_b = 0;
-        const_b = device->state.vs_const_b;
-
-        lconstf_ranges = device->state.vs->lconstf.ranges;
-        lconstf_data = device->state.vs->lconstf.data;
-
-        device->state.changed.group &= ~NINE_STATE_VS_CONST;
-    } else {
-        DBG("PS\n");
-        /* features only implemented on the userbuf path */
-        if (device->state.ps->bumpenvmat_needed || (
-            device->state.ps->byte_code.version < 0x30 &&
-            device->state.rs[D3DRS_FOGENABLE])) {
-            device->prefer_user_constbuf = TRUE;
-            prepare_ps_constants_userbuf(device);
-            return;
-        }
-        buf = device->constbuf_ps;
-
-        const_f = device->state.ps_const_f;
-        for (p = r = device->state.changed.ps_const_f; r; p = r, r = r->next)
-            DO_UPLOAD_CONST_F(buf, r->bgn, r->end - r->bgn, const_f);
-        if (p) {
-            nine_range_pool_put_chain(&device->range_pool,
-                                      device->state.changed.ps_const_f, p);
-            device->state.changed.ps_const_f = NULL;
-        }
-
-        dirty_i = device->state.changed.ps_const_i;
-        device->state.changed.ps_const_i = 0;
-        const_i = &device->state.ps_const_i[0][0];
-
-        dirty_b = device->state.changed.ps_const_b;
-        device->state.changed.ps_const_b = 0;
-        const_b = device->state.ps_const_b;
-
-        lconstf_ranges = NULL;
-        lconstf_data = NULL;
-
-        device->state.changed.group &= ~NINE_STATE_PS_CONST;
-    }
-
-    /* write range from min to max changed, it's not much data */
-    /* bool1 */
-    if (dirty_b) {
-       c = util_last_bit(dirty_b);
-       i = ffs(dirty_b) - 1;
-       x = buf->width0 - (NINE_MAX_CONST_B - i) * 4;
-       c -= i;
-       memcpy(data_b, &(const_b[i]), c * sizeof(uint32_t));
-       box.x = x;
-       box.width = c * 4;
-       DBG("upload ConstantB [%u .. %u]\n", x, x + c - 1);
-       pipe->transfer_inline_write(pipe, buf, 0, usage, &box, data_b, 0, 0);
-    }
-
-    /* int4 */
-    for (c = 0, i = 0; dirty_i; i++, dirty_i >>= 1) {
-        if (dirty_i & 1) {
-            if (!c)
-                x = i;
-            ++c;
-        } else
-        if (c) {
-            DBG("upload ConstantI [%u .. %u]\n", x, x + c - 1);
-            data = &const_i[x * 4];
-            box.x  = buf->width0 - (NINE_MAX_CONST_I * 4 + NINE_MAX_CONST_B) * 4;
-            box.x += x * 4 * sizeof(int);
-            box.width = c * 4 * sizeof(int);
-            c = 0;
-            pipe->transfer_inline_write(pipe, buf, 0, usage, &box, data, 0, 0);
-        }
-    }
-    if (c) {
-        DBG("upload ConstantI [%u .. %u]\n", x, x + c - 1);
-        data = &const_i[x * 4];
-        box.x  = buf->width0 - (NINE_MAX_CONST_I * 4 + NINE_MAX_CONST_B) * 4;
-        box.x += x * 4 * sizeof(int);
-        box.width = c * 4 * sizeof(int);
-        pipe->transfer_inline_write(pipe, buf, 0, usage, &box, data, 0, 0);
-    }
-
-    /* TODO: only upload these when shader itself changes */
-    if (lconstf_ranges) {
-        unsigned n = 0;
-        struct nine_range *r = lconstf_ranges;
-        while (r) {
-            box.x = r->bgn * 4 * sizeof(float);
-            n += r->end - r->bgn;
-            box.width = (r->end - r->bgn) * 4 * sizeof(float);
-            data = &lconstf_data[4 * n];
-            pipe->transfer_inline_write(pipe, buf, 0, usage, &box, data, 0, 0);
-            r = r->next;
-        }
-    }
-}
 
 static void
 prepare_vs_constants_userbuf(struct NineDevice9 *device)
@@ -505,6 +356,10 @@ update_viewport(struct NineDevice9 *device)
     struct pipe_context *pipe = device->pipe;
     const D3DVIEWPORT9 *vport = &device->state.viewport;
     struct pipe_viewport_state pvport;
+    char *env_string = NULL;
+    float precission_corr_options[3];
+    int precission_corr_options_num = 0;
+    boolean force_precission_corr = FALSE;
 
     /* D3D coordinates are:
      * -1 .. +1 for X,Y and
@@ -534,13 +389,28 @@ update_viewport(struct NineDevice9 *device)
      * height are powers of two.
      * Solves 'red shadows' bug on UE3 games.
      */
-    if (device->driver_bugs.buggy_barycentrics &&
-        ((vport->Width & (vport->Width-1)) == 0) &&
-        ((vport->Height & (vport->Height-1)) == 0)) {
-        pvport.translate[0] -= 1.0f / 128.0f;
-        pvport.translate[1] -= 1.0f / 128.0f;
+    env_string = getenv("NINE_DEBUG_PRECCORR");
+    if (env_string) {
+        precission_corr_options_num = sscanf(env_string, "%f %f %f",
+                                             precission_corr_options,
+                                             precission_corr_options+1,
+                                             precission_corr_options+2);
+        force_precission_corr = strstr(env_string, "force");
+    }
+    if ((device->driver_bugs.buggy_barycentrics &&
+       ((vport->Width & (vport->Width-1)) == 0) &&
+       ((vport->Height & (vport->Height-1)) == 0)) ||
+       (!force_precission_corr || precission_corr_options_num == 3)) {
+       if (precission_corr_options_num == 3) {
+           pvport.translate[0] -= precission_corr_options[0];
+           pvport.translate[1] -= precission_corr_options[1];
+           pvport.translate[2] -= precission_corr_options[2];
+       }
+       else {
+         pvport.translate[0] -= 1.0f / 128.0f;
+         pvport.translate[1] -= 1.0f / 128.0f;
+       }
     }
-
     pipe->set_viewport_states(pipe, 0, 1, &pvport);
 }
 
@@ -994,17 +864,10 @@ nine_update_state(struct NineDevice9 *device)
             prepare_rasterizer(device);
         if (group & (NINE_STATE_TEXTURE | NINE_STATE_SAMPLER))
             update_textures_and_samplers(device);
-        if (device->prefer_user_constbuf) {
-            if ((group & (NINE_STATE_VS_CONST | NINE_STATE_VS)) && state->vs)
-                prepare_vs_constants_userbuf(device);
-            if ((group & (NINE_STATE_PS_CONST | NINE_STATE_PS)) && state->ps)
-                prepare_ps_constants_userbuf(device);
-        } else {
-            if ((group & NINE_STATE_VS_CONST) && state->vs)
-                upload_constants(device, PIPE_SHADER_VERTEX);
-            if ((group & NINE_STATE_PS_CONST) && state->ps)
-                upload_constants(device, PIPE_SHADER_FRAGMENT);
-        }
+        if ((group & (NINE_STATE_VS_CONST | NINE_STATE_VS)) && state->vs)
+            prepare_vs_constants_userbuf(device);
+        if ((group & (NINE_STATE_PS_CONST | NINE_STATE_PS)) && state->ps)
+            prepare_ps_constants_userbuf(device);
     }
 
     if (state->changed.vtxbuf)
@@ -1171,23 +1034,6 @@ nine_state_set_defaults(struct NineDevice9 *device, const D3DCAPS9 *caps,
         state->dummy_vbo_bound_at = -1;
         state->vbo_bound_done = FALSE;
     }
-
-    if (!device->prefer_user_constbuf) {
-        /* fill cb_vs and cb_ps for the non user constbuf path */
-        struct pipe_constant_buffer cb;
-
-        cb.buffer_offset = 0;
-        cb.buffer_size = device->vs_const_size;
-        cb.buffer = device->constbuf_vs;
-        cb.user_buffer = NULL;
-        state->pipe.cb_vs = cb;
-
-        cb.buffer_size = device->ps_const_size;
-        cb.buffer = device->constbuf_ps;
-        state->pipe.cb_ps = cb;
-
-        state->commit |= NINE_STATE_COMMIT_CONST_VS | NINE_STATE_COMMIT_CONST_PS;
-    }
 }
 
 void
diff --git a/src/gallium/state_trackers/nine/nine_state.h b/src/gallium/state_trackers/nine/nine_state.h
index 8276b7c..b7cd3b4 100644
--- a/src/gallium/state_trackers/nine/nine_state.h
+++ b/src/gallium/state_trackers/nine/nine_state.h
@@ -255,6 +255,13 @@ nine_state_access_transform(struct nine_state *, D3DTRANSFORMSTATETYPE,
 
 const char *nine_d3drs_to_string(DWORD State);
 
+static void
+prepare_ps_constants_userbuf(struct NineDevice9 *device);
+
+static void
+prepare_vs_constants_userbuf(struct NineDevice9 *device);
+
+
 static const DWORD nine_render_state_defaults[NINED3DRS_LAST + 1] =
 {
  /* [D3DRS_ZENABLE] = D3DZB_TRUE; wine: auto_depth_stencil */
